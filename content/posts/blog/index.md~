---
title: "Go Hugo, a journey"
date: 2023-03-01T12:36:52-07:00
draft: true
description: "A brief overview of building my portfolio site using Hugo, exploring why I chose Hugo over other site generators, and a more detailed look at a few challenges I overcome while integrating my workflow."
---
<!--more-->
## Class of '23
It was time to update my professional profile, resume, and, most importantly, my portfolio. The design program encouraged students use Adobe's Portfolio in preparation for their internships during their 2nd year of studies. It was time for a change.

{{< admonition warning "Goodbye, Adobe" true >}}
While the decision to use Adobe's portfolio has many advantages, it comes with a few significant draw backs:
1. **Price tag** is the major deterent, specifically the push to a annual subscription model.
1. **Formulaic offerings** which look great but offer little in terms of customizability.
1. **Uninspired user experience** that offers tedious formatting options and leaves me frustrated.

For the price, I find Adobe's offering to be prohibitively restrictive while simultaneously including far more than my work requires. 
{{< /admonition >}}

## Static Site Generators
According to Jamstack, {{< link "https://jamstack.org/glossary/ssg/" "Static Site Generators (SSGs)" >}} serve a website from a prebuilt set of files within a repository, such as git. There are many flavours of SSGs, each with their own set of features and capabilities. The most popular of which are Gatsby, Jekyll, 11ty, Next.js, Astro, Docusaurus, and Hugo.

### Exploring My Options
Despite my technical inclinations, I wanted a portfolio solution which required minimal configuration and dependencies. I experimented with a few popular choices, initially Gatsby and then Eleventy, but neither platform felt succinct. It was a series of incompatibilities and redundant workarounds which ultimately discouraged further experimentation. I wanted simplicity. 

{{< admonition question "Go, Hugo" true >}}
{{< link "https://gohugo.io/" Hugo >}} is a static site generator written in Go. I chose Hugo because it satisfys the following criteria:
1. **Headless CMS** allows me to write entries in plain text instead of formatting text within Adobe's content management system.
1. **Markdown** is used for page content and meta data.
1. **Shortcodes** for javascript libraries like lazy image loading and lightbox galleries.
1. **TOML** language is used for simple configuration.
1. **Instant previews** save time and help troubleshooting.
{{< /admonition >}}

## Site Building 
The process of building the portfolio site was split between two workflows: (1) creating the site and (2) format existing content.

### Create New Site
I followed the official {{< link "https://gohugo.io/getting-started/quick-start/" "Quick Start" >}} to install Hugo, create a new site, acquire a theme, and run the included development server to test that everything was working as expected.

{{< admonition example ":(far fa-kiss-wink-heart fa-fw): LoveIt" true >}}
[:(far fa-kiss-wink-heart fa-fw): LoveIt](https://github.com/dillonzq/LoveIt) is a theme for [Hugo](https://gohugo.io/) developed by {{< person "https://dillonzq.com/" Dillon "author of the LoveIt theme" "Dillon.png" >}}. It is based on the original [LeaveIt Theme](https://github.com/liuzc/LeaveIt) and [KeepIt Theme.](https://github.com/Fastbyte01/KeepIt)

**This theme is fantastic!**

I chose LoveIt for it's simplicity and because it provides the functionality I require, specifically:
* :(fas fa-tachometer-alt fa-fw): **CDN** for third-party libraries supported
* :(fas fa-cloud-download-alt fa-fw): **Lazy Load** by [lazysizes](https://github.com/aFarkas/lazysizes) to auto-resize images
* :(far fa-images fa-fw): **Images gallery** supported by [lightGallery](https://github.com/sachinchoolur/lightgallery)
* :(fas fa-mobile-screen fa-fw): **Responsive** layout
* :(fas fa-circle-half-stroke fa-rotate-180 fa-fw): **Light/Dark** mode
* :(fas fa-search fa-fw): **Search** supported by [Lunr.js](https://lunrjs.com/) or [algolia](https://www.algolia.com/)
* :(fas fa-square-root-alt fa-fw): **Mathematical formula** supported by [$\KaTeX$](https://katex.org/)
* :(fas fa-project-diagram fa-fw): **Diagrams** shortcode supported by [mermaid](https://github.com/mermaid-js/mermaid)
* :(fas fa-chart-pie fa-fw): **Data visualization** shortcode supported by [ECharts](https://echarts.apache.org/)
* :(fas fa-note-sticky fa-fw): **Admonitions** shortcode
* :(fab fa-css3 fa-fw): **Custom style** shortcode
* :(fab fa-js-square fa-fw): **Custom script** shortcode
* :(fas fa-code fa-fw): **Highlight** code automatically
* :(far fa-copy fa-fw): **Copy code** to clipboard with one click
* :(fab fa-font-awesome fa-fw): **[Font Awesome](https://fontawesome.com/) icons**
{{< /admonition >}}

### Create First Post

Use Hugo's CLI to create a new entry, for example: 
```bash
hugo new posts/aProject/index.md
```
Then, add some images to the folder.
```txt
newSite/
├── archetypes/
│   └── default.md
├── assets
├── content/
│   └── posts/
│       └── aProject/
│           ├── index.md
│           ├── featured-image.jpeg
│           ├── featured-image-preview.jpeg
│           ├── photo_example.png
│           ├── image_example.png
│           └── avatar_example.png
├── data
├── layouts
├── public
├── static
├── themes
└── config.toml
```


### (re)Format Content
As the bulk of my work exists as physical documents, either .docx or .pdf files, it was important to consider how scale and viewability intersect in the context of a webpage.

For this reason, I chose not to use mockups and instead opted for a pop-out gallery because it allows for a more tactile experience with each document. Using zoom and pan functionality enables a dynamic viewport at scale, and the ability to flip through a gallery like the pages of a book, provides an experience more resonant of using these documents in practice.


